---
title: "Basic R & Tidyverse R"
format: revealjs
---

# $R2r\pm8p$

*R Tour in about 8 pages*  

Base R, Readr, Tidyr, Dplyr

![](base-r1.png){.absolute top="-250" left="0" height="300"}
![](base-r2.png){.absolute bottom="-250" left="-0" height="300"}
![](data-import-cheatsheet-thumbs.png){.absolute top="-250" right="30" height="300"} ![](tidyr-thumbs.png){.absolute top="0" right="-35" height="300"} ![](data-transformation-cheatsheet-thumbs.png){.absolute bottom="-250" right="30" height="300"}

------------------------------------------------------------------------

![](base-r1.png){.absolute top="-120" left="-100" height="300"}

------------------------------------------------------------------------

##  {background="cs_mov/base-r-help.gif" }

------------------------------------------------------------------------

##  {background="cs_mov/base-r-vec1.gif"}


------------------------------------------------------------------------

##  {background="cs_mov/base-r-vec1.gif"}

---

![](base-r2.png)



------------------------------------------------------------------------


## {background="cs_mov/base-r-dtypes.gif"}

------------------------------------------------------------------------

## {background="cs_mov/base-r-lists-mats.gif"}

------------------------------------------------------------------------

## {background="cs_mov/base-r-dataframes.gif"}

------------------------------------------------------------------------



------------------------------------------------------------------------

# Basic R (2)

------------------------------------------------------------------------

## {background="cs_mov/base-r-help.gif"}

------------------------------------------------------------------------

![](base-r1.png)

------------------------------------------------------------------------

![](base-r2.png)

## Getting Help

## Using Packages

## Working Directory (and Projects)

## R Environment & Namespace

## Datatypes & Structures

-   character strings

-   numeric: integer or floating point

-   boolean

-   factor

-   vectors

-   matrices

-   lists

-   factors

-   dataframes

## Vectors & Matrices (named?)

## Lists, Factors, Dataframes

## Functions

c(), \[\], \<-, \|\> , seq(), \$ or . +,-,\*,/,//,%,

## Metaprogramming

-   string manipulation
-   function functions

## Math Functions

## Statistics

\~

# Tidyverse R

```{latex}
                                          .---> Communicate
read -> wrangle ---.--> transform ---+-- /
                   ^                 |            
                   |                 v
                   model <-- visualize 
                   
```

## Tidyverse Concepts

![](tidydata_1.jpg)

## Tidyverse Concepts

![](tidydata_2.jpg)

## Tidyverse Concepts

![](tidydata_3.jpg)

# readr, haven, rvest, & tibble (2)

------------------------------------------------------------------------

## Importing Data

![](readr.png)


## {background="cs_mov/.gif"}

---

## Readxl

![](readxl2.png)

## {background="cs_mov/readxl.gif"}


# Tidyr

---

![](tidyr1.png)

---

## {background="cs_mov/.gif"}

---

## {background="cs_mov/tidyr-def.gif"}


---

## tibble

------------------------------------------------------------------------

## {background="cs_mov/tidyr-pivot.gif"}

------------------------------------------------------------------------

## pivot

------------------------------------------------------------------------

## {background="cs_mov/tidyr-sep-unite.gif"}

------------------------------------------------------------------------

## Dplyr: extract, unite & separate

---

# Dplyr

------------------------------------------------------------------------

## ![](dplyr1.png)

## {background="cs_mov/dplyr-pipe-summ.gif"}


## Dplyr: Summarize

- summarise(.data, …) 
   - Compute table of summaries. 
`r summarise(mtcars, avg = mean(mpg))`

- count(.data, …, wt = NULL, sort = FALSE, name = NULL) 
   - Count number of rows in each group defined by the variables in … Also tally().

`r count(mtcars, cyl)`

------------------------------------------------------------------------

## {background="cs_mov/dplyr-filter-slice-cases.gif"}


## Dplyr: Extract Cases
### Row functions return a subset of rows as a new table.

filter(.data, …, .preserve = FALSE) Extract rows that meet logical criteria. 
filter(mtcars, mpg > 20)

distinct(.data, …, .keep_all = FALSE) Remove rows with duplicate values. 
distinct(mtcars, gear)

------------------------------------------------------------------------

![](dplyr_filter.jpg)

------------------------------------------------------------------------

## {background="cs_mov/dplyr-select-variable.gif"}

------------------------------------------------------------------------

![](dplyr_relocate.png)

------------------------------------------------------------------------

![](dplyr_across.png)

------------------------------------------------------------------------

## {background="cs_mov/dplyr-mutate-variable.gif"}

------------------------------------------------------------------------

## Mutate

![](dplyr_mutate.png)

------------------------------------------------------------------------

## {background="cs_mov/dplyr-un-group.gif"}


## Dplyr: Group Cases

Use group_by(.data, …, .add = FALSE, .drop = TRUE) to create a "grouped" copy of a table grouped by columns in ... dplyr functions will manipulate each "group" separately and combine the results.

Use rowwise(.data, …) to group data into individual rows. dplyr functions will compute results for each row. Also apply functions to list-columns. See tidyr cheat sheet for list-column workflow.

ungroup(x, …) Returns ungrouped copy of table. 
ungroup(g_mtcars)


------------------------------------------------------------------------

## Dplyr

------------------------------------------------------------------------

![](dplyr2.png)

------------------------------------------------------------------------

## {background="cs_mov/dplyr-preserve-cases.gif"}

------------------------------------------------------------------------

![](dplyr_case_when.png)

------------------------------------------------------------------------
e
## {background="cs_mov/dplyr-joins.gif"}

# Advanced R (5)

## Environments

## Data Objects

## Functions

## Subsetting

## Reading in (wait TV)

## R datatypes

-   atomic datatypes

-   data structures

    -   vectors (1 type: char or int flt)
    -   lists
    -   factors
    -   dataframes

## functions

-   assignment
-   arith
-   logic
-   flow control

## m/l/t-aply

doit -n 4 -P thread raw_epochs_ar_pi


